@page "/MisVehiculos"
@using Clases
@using Repositorio
@inject IRepositorio Repositorio
@inject NavigationManager NavManager

<div class="card">
    <div class="card-header bg-dark">
        <div class="row">
            <div class="col-sm-9">
                <h2ehiculos style="font-family:'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif" class="text-info">Lista de Vehículos</h2ehiculos>
            </div>
            <div class="col-sm-3">
                <a href="MisVehiculos/Crear" style="font-family:'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif" class="btn btn-primary">Crear nuevo Vehículo</a>
            </div>

        </div>
    </div>
    <div class="card-body">

        @if (listaVehiculos==null)
        {
            <label>Cargando...</label>
        }
        else
        {
             <table class="table table-striped border">
            <tr class="table-secondary">
                <th>ID Vehículo</th>
                <th>Matrícula</th>
                <th>Tipo de Vehículo</th>
                <th>Nombre cliente</th>
            </tr>
            @foreach (var item in listaVehiculos)
            {
                <tr>
                    <td>@item.idVehiculo</td>
                    <td>@item.Matricula</td>
                    <td>@ObtienePropiedad(@item.tipoVehiculo)</td>
                    <td>@ObtieneNombreCliente(@item.ClienteID)</td>
                    <td>
                        <a href="MisClientes/Editar/@item.idVehiculo" class="btn btn-success btn-sm">Editar</a>
                            <a href="MisClientes/FichaCliente/@item.idVehiculo" class="btn btn-secondary btn-sm">Ficha</a>
                            <button @onclick="@(() => DeleteVehiculo(item.idVehiculo))" class="btn btn-danger btn-sm">Borrar</button>
                    </td>
                </tr>    
            }
        </table> 

        }

    </div>
</div>


@code
{

    private List<Vehiculos> listaVehiculos = new List<Vehiculos>();
    private Vehiculos[]? listaVehiculosGrid;
    private IList<Vehiculos> vehiculoSeleccionado;
    private List<Camiones> listaCamiones = new List<Camiones>();

    private String ObtienePropiedad(int id)
    {
        string resultado="";
        if (id==0)
        {
            resultado = "Camión";
        } 
        else if(id==1)
        {
            resultado = "Autocaravana";
        }
        return resultado;
    }


    public async Task<string> ObtieneNombreCliente(int id)
    {
        Clientes cliente = await Repositorio.GetClienteID(id);
        String resultado = cliente.NombreYApellidos;
        return Task.FromResult<resultado>;
    }

    protected override async Task OnInitializedAsync()
    {
        listaVehiculos = await Repositorio.GetVehiculos();
        listaCamiones = await Repositorio.GetCamiones();
        // await pasoCamionesAVehiculos();
    }
    private void EditVehiculo(int id)
    {
        NavManager.NavigateTo($"/MisVehiculos/Editar/{id}");
    }

    private async Task DeleteVehiculo(int id)
    {
        await Repositorio.EliminarVehiculo(id);
        NavManager.NavigateTo(NavManager.Uri, true);
    }
    private string PasoAString(int num)
    {
        String resultado = "";
        if (num == 0)
        {
            resultado = "Camión";
        }
        else if (num==1) { resultado = "Autocaravana"; }
        else if (num==2) { resultado="Turismo"; }
        return resultado;
    }

    private async Task pasoCamionesAVehiculos()
    {
        foreach (var item in listaCamiones)
        {
            Vehiculos vehiculos = new Vehiculos();
            // vehiculos.idVehiculo = item.idCamion;
            vehiculos.tipoVehiculo = 0;
            vehiculos.ClienteID = item.ClienteID;
            vehiculos.Matricula = item.Matricula;
            await Repositorio.CrearVehiculo(vehiculos);

        }   
    }
}
